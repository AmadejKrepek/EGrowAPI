// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EGrowAPI.Migrations
{
    [DbContext(typeof(MySqlContext))]
    [Migration("20220310163246_final")]
    partial class final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeviceGuid")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeviceManufactured")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DeviceRegisteredToUser")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<int>("FertilizerLevel")
                        .HasColumnType("int");

                    b.Property<bool>("HasError")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WaterTankLevel")
                        .HasColumnType("int");

                    b.HasKey("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FullyGrownCm")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<int>("OptimalAmbientHumidityPercentage")
                        .HasColumnType("int");

                    b.Property<double>("OptimalAmbientTemperatureCelsius")
                        .HasColumnType("double");

                    b.Property<int>("OptimalLeafWetness")
                        .HasColumnType("int");

                    b.Property<int>("OptimalSoilHumidityPercentage")
                        .HasColumnType("int");

                    b.Property<double>("OptimalSoilTemperatureCelsius")
                        .HasColumnType("double");

                    b.Property<int>("OptimalSolarRadiation")
                        .HasColumnType("int");

                    b.Property<int>("OptimalUvIndex")
                        .HasColumnType("int");

                    b.Property<string>("PlantDescription")
                        .HasColumnType("text");

                    b.Property<string>("PlantName")
                        .HasColumnType("text");

                    b.Property<string>("PlantType")
                        .HasColumnType("text");

                    b.Property<int>("SensorDataId")
                        .HasColumnType("int");

                    b.HasKey("PlantId");

                    b.HasIndex("SensorDataId")
                        .IsUnique();

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("Models.SensorData", b =>
                {
                    b.Property<int>("SensorDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AmbientHumidityPercentage")
                        .HasColumnType("int");

                    b.Property<double>("AmbientTemperatureCelsius")
                        .HasColumnType("double");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("GrowthCm")
                        .HasColumnType("int");

                    b.Property<int>("LeafWetness")
                        .HasColumnType("int");

                    b.Property<int>("SoilHumidityPercentage")
                        .HasColumnType("int");

                    b.Property<double>("SoilTemperatureCelsius")
                        .HasColumnType("double");

                    b.Property<int>("SolarRadiation")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("UvIndex")
                        .HasColumnType("int");

                    b.HasKey("SensorDataId");

                    b.HasIndex("DeviceId");

                    b.ToTable("SensorData");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserGuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserGuid");

                    b.Property<DateTime>("UserRegistration")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Device", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Plant", b =>
                {
                    b.HasOne("Models.SensorData", "SensorMeasurement")
                        .WithOne("Plant")
                        .HasForeignKey("Models.Plant", "SensorDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorMeasurement");
                });

            modelBuilder.Entity("Models.SensorData", b =>
                {
                    b.HasOne("Models.Device", "Device")
                        .WithMany("SensorMeasurements")
                        .HasForeignKey("DeviceId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Models.Device", b =>
                {
                    b.Navigation("SensorMeasurements");
                });

            modelBuilder.Entity("Models.SensorData", b =>
                {
                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
